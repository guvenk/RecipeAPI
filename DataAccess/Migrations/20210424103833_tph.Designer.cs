// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210424103833_tph")]
    partial class tph
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogType")
                        .HasColumnType("int")
                        .HasColumnName("blogType");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("BlogId");

                    b.ToTable("blogs");

                    b.HasDiscriminator<int>("BlogType").HasValue(0);
                });

            modelBuilder.Entity("DataAccess.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(2)")
                        .HasColumnName("createdDate");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("versionId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("VersionId");

                    b.ToTable("comment", "dbo");
                });

            modelBuilder.Entity("DataAccess.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(2)")
                        .HasColumnName("createdDate");

                    b.Property<string>("RawUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("rawUrl");

                    b.Property<string>("StorageSource")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("storageSource");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("type");

                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("versionId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("VersionId");

                    b.ToTable("media", "dbo");
                });

            modelBuilder.Entity("DataAccess.MetaItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("dataType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("metaItem", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataType = "string",
                            Name = "Title"
                        },
                        new
                        {
                            Id = 2L,
                            DataType = "string",
                            Name = "Description"
                        },
                        new
                        {
                            Id = 3L,
                            DataType = "string",
                            Name = "OriginCountry"
                        },
                        new
                        {
                            Id = 4L,
                            DataType = "string",
                            Name = "OriginCity"
                        },
                        new
                        {
                            Id = 5L,
                            DataType = "string",
                            Name = "Category"
                        },
                        new
                        {
                            Id = 6L,
                            DataType = "string",
                            Name = "Ingredient"
                        },
                        new
                        {
                            Id = 7L,
                            DataType = "bool",
                            Name = "IsSpicy"
                        });
                });

            modelBuilder.Entity("DataAccess.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("postId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("PostId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("DataAccess.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("MetaItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("metaItemId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("value");

                    b.Property<long>("VersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("versionId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("MetaItemId");

                    b.HasIndex("VersionId");

                    b.ToTable("property", "dbo");
                });

            modelBuilder.Entity("DataAccess.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("apiVersion");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(2)")
                        .HasColumnName("createdDate");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("recipe", "dbo");
                });

            modelBuilder.Entity("DataAccess.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tagId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("TagId");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("DataAccess.Version", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(2)")
                        .HasColumnName("createdDate");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipeId");

                    b.Property<long?>("RecipeId1")
                        .HasColumnType("bigint")
                        .HasColumnName("recipeId1");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("RecipeId");

                    b.HasIndex("RecipeId1");

                    b.ToTable("version", "dbo");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsPostId")
                        .HasColumnType("int")
                        .HasColumnName("postsPostId");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int")
                        .HasColumnName("tagsTagId");

                    b.HasKey("PostsPostId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("postTag");
                });

            modelBuilder.Entity("DataAccess.RssBlog", b =>
                {
                    b.HasBaseType("DataAccess.Blog");

                    b.Property<string>("RssUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rssUrl");

                    b.ToTable("blogs");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DataAccess.Comment", b =>
                {
                    b.HasOne("DataAccess.Version", "Version")
                        .WithMany("Comments")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("DataAccess.Media", b =>
                {
                    b.HasOne("DataAccess.Version", "Version")
                        .WithMany("Medias")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("DataAccess.Property", b =>
                {
                    b.HasOne("DataAccess.MetaItem", "MetaItem")
                        .WithMany()
                        .HasForeignKey("MetaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Version", "Version")
                        .WithMany("Properties")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaItem");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("DataAccess.Version", b =>
                {
                    b.HasOne("DataAccess.Recipe", null)
                        .WithMany("Versions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId1");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("DataAccess.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Recipe", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("DataAccess.Version", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Medias");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
